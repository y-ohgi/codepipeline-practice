AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  StackName:
    Type: 'String'
    Default: 'test'

  # CodeCommit Repository Name
  RepositoryName:
    Type: 'String'
    Default: 'test'

  # ECR Registry Name
  RegistryName:
    Type: 'String'
    Default: 'app'

Resources:
  #============================================================
  # CodeCommit
  #============================================================
  CodeCommitPushUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub '${AWS::StackName}-CodeCommitPushUser'
      Policies:
        - PolicyName: "CodeCommitPullPolicy"
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "codecommit:GitPull"
                  ],
                  "Resource": [
                    "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}"
                  ],
                  "Effect": "Allow"
                }
              ]
            }

  #============================================================
  # CodeBuild
  #============================================================
  CodeBuildLogGroup: 
    Type: 'AWS::Logs::LogGroup'
    Properties: 
      LogGroupName: !Sub '/aws/codebuild/${AWS::StackName}'
      RetentionInDays: 7

  CodeBuildRole:
    DependsOn: [CodeBuildLogGroup, CodePipelineBucket]
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: 'Allow'
            Principal:
              Service: ['codebuild.amazonaws.com']
      Policies:
        - PolicyName: "CodeBuildCustomPolicy"
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::${CodePipelineBucket}/*"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}",
                    "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}:*"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart"
                  ],
                  "Resource": [
                    "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RegistryName}"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": [
                    "*"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "codecommit:GitPull"
                  ],
                  "Resource": [
                    "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}"
                  ],
                  "Effect": "Allow"
                }
              ]
            }

  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Ref 'AWS::StackName'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: 'no_artifacts'
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/docker:17.09.0'
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: 'AWS_ACCOUNT_ID'
            Value: !Ref AWS::AccountId
          - Name: 'CODECOMMIT_REGISTRY_NAME'
            Value: !Ref RepositoryName
          - Name: 'ECR_REPOSITORY_NAME'
            Value: !Ref RegistryName
      Source:
        Type: 'CODECOMMIT'
        Location: !Sub 'https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepositoryName}'
        BuildSpec: 'buildspec.yml'
        GitCloneDepth: 1
      TimeoutInMinutes: 30

  #============================================================
  # CodePipeline
  #============================================================
  CodePipelineBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled

  # TODO: iam:pass
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: 'Allow'
            Principal:
              Service: ['codepipeline.amazonaws.com']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitReadOnly
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: "DataSourceAccess"
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "codecommit:UploadArchive"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::${CodePipelineBucket}/*"
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "cloudformation:CreateStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:DeleteStack",
                    "cloudformation:UpdateStack",
                    "cloudformation:CreateChangeSet",
                    "cloudformation:ExecuteChangeSet",
                    "cloudformation:DeleteChangeSet",
                    "cloudformation:DescribeChangeSet",
                    "cloudformation:SetStackPolicy",
                    "iam:PassRole"
                  ],
                  "Resource": [
                    "*"
                  ],
                  "Effect": "Allow"
                }
              ]
            }

  # TODO: iam policy
  CodePipelineCFnDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['cloudformation.amazonaws.com']
      Policies:
        - PolicyName: "DataSourceAccess"
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "*",
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }

  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineBucket
        Type: 'S3'
      Name: 'PipelineName'
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: 'Source'
          Actions:
            - Name: 'Source'
              RunOrder: 1
              ActionTypeId:
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeCommit'
                Version: 1
              Configuration:
                PollForSourceChanges: false
                RepositoryName: !Ref RepositoryName
                BranchName: 'master'
              OutputArtifacts:
                - Name: Source

        - Name: Build
          Actions:
            - Name: Build
              RunOrder: 1
              InputArtifacts:
                - Name: Source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: 'test'
              OutputArtifacts:
                - Name: Build

        - Name: PreDeploy
          Actions:
            - Name: CreateChangeSet
              RunOrder: 1
              InputArtifacts:
                - Name: Source
                - Name: Build
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Sub '${AWS::StackName}-PreDeploy'
                StackName: ecs # !Sub ${AWS::StackName} #TODO
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: 'Source::aws/ecs.yaml'
                RoleArn: !GetAtt CodePipelineCFnDeployRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "ImageTag": { "Fn::GetParam" : [ "Build", "build.json", "tag" ] }
                  }
                # ParameterOverrides: !Sub |
                #   {
                #     "ImageTag": { "Fn::GetParam" : [ "Build", "build.json", "tag" ] },
                #     "AppName": "${AppName}",
                #     "OwnerName": "${OwnerName}",
                #     "RoleName": "${RoleName}",
                #     "StageName": "${StageName}",
                #     "VpcId": "${VpcId}"
                #   }

        - Name: Approve
          Actions:
            - Name: Approve
              RunOrder: 1
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'

        - Name: Deploy
          Actions:
            - Name: DeployChangeSet
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub '${AWS::StackName}-PreDeploy'
                StackName: ecs #!Sub ${AWS::StackName} #TODO
                RoleArn: !GetAtt CodePipelineCFnDeployRole.Arn

  #============================================================
  # CloudWatch Event
  #============================================================
  CloudWatchEventCodeCommitRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: 'Allow'
            Principal:
              Service: ['events.amazonaws.com']
      Policies:
        - PolicyName: "CodePipeline-Execution"
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codepipeline:StartPipelineExecution"
                  ],
                  "Resource": [
                    "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
                  ]
                }
              ]
            }

  CloudWatchEventCodeCommitRule:
    Type: 'AWS::Events::Rule'
    Properties: 
      Description: 'EventRule'
      State: "ENABLED"
      EventPattern: !Sub |
        {
          "source": [
            "aws.codecommit"
          ],
          "detail-type": [
            "CodeCommit Repository State Change"
          ],
          "resources": [
            "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}"
          ],
          "detail": {
            "event": [
              "referenceCreated",
              "referenceUpdated"
            ],
            "referenceType": [
              "branch"
            ],
            "referenceName": [
              "master"
            ]
          }
        }
      Targets:
        - RoleArn: !GetAtt CloudWatchEventCodeCommitRuleRole.Arn
          Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'
          Id: !Sub 'CodePipeline'
